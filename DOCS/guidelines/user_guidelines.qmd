---
title: "User Guide: Working with Documents and Publishing to GitHub Pages"
format: pdf
keywords: ["test git", "git commands", "editor commit", "repository make", "publish
    pull", "feature branch", "branch github", "create edit", "publishing main", "ensuring
    documents"]
---

---

## Step 1: Create Your Feature Branch

You can do this either through GitHub's website or using Git commands in your terminal:

### Using GitHub (Easy Option):
1. Open GitHub and navigate to your repository.
2. Select the **test** branch from the dropdown menu at the top left.
3. Click the button labeled **New branch** and name it clearly, for example, `feature/new-document`.

### Using Command Line (Recommended for frequent users):
- Open your terminal or command prompt.
- Navigate to your local repository using:

```bash
cd path/to/your/repository
```

- Make sure your repository is updated:

```bash
git checkout test
git pull
```

- Create and switch to your new feature branch:

```bash
git checkout -b feature/new-document
```

## Working on Documents

### Suggested Editors:
- **RStudio:** Easy integration with Quarto and Git.
- **Visual Studio Code:** Great support for Quarto documents.
- **Any plain text editor** you prefer.

### Create or Edit Documents:
- Add new documents by creating `.qmd` files.
- Edit existing `.qmd` files directly in your chosen editor.

### Commit Your Changes (Command Line):
- Stage your changes:

```bash
git add .
```

- Commit your changes with a clear message:

```bash
git commit -m "Added introduction to the Privacy Guide"
```

- Push your changes to GitHub:

```bash
git push origin feature/new-document
```

## Publishing for Review (Test Environment)

### Create a Pull Request (PR):
1. Go to your feature branch in GitHub.
2. Click on **Compare & pull request**.
3. Set the pull request destination to the `test` branch.
4. Provide a simple description of your changes and click **Create pull request**.

### Review and Publish:
- Once your pull request is reviewed and approved by the team, it will be merged into the `test` branch.
- The merged content will automatically be published to the **test GitHub Pages**.
- View and review your documents by visiting the test pages link provided by your team.

## Final Publishing to Main Environment

After reviewing and ensuring your documents are correct:

### Merge to Main:
1. Create another pull request from the `test` branch to the `main` branch.
2. Clearly mention that the content is ready for final publishing.

### Final Review and Approval:
- Your team reviews and approves the pull request.
- Once merged, the documents are automatically published to the main GitHub Pages for everyone to access.

## Versioning

Every time new changes are published to the main branch, a version number is automatically assigned. You don't need to do anythingâ€”this happens behind the scenes to help track document versions clearly.

## How to Revert to a Previous Version

If you need to go back to an earlier version:

1. Go to your repository on GitHub and click on **Tags**.
2. Find the version (tag) you want to revert to.
3. To revert locally using command line:

```bash
git checkout tags/v1.0
```

Replace `v1.0` with your desired version.

4. If you want to make the reverted version the new main version again, create a new feature branch from this tag and follow the usual pull request workflow described above.

---
