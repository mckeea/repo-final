---
title: "Technical Implementation Overview: Quarto Docs Workflow with GitHub Actions"
format: pdf
keywords: ["tagging versioning", "versioning automatic", "versioning makes", "branches
    workflow", "qmd documents", "documents project", "manage quarto", "test branch",
  "main publishing", "details github"]
---

## Overview

This document covers the technical details and strategy used to manage Quarto (.qmd) documents within our project. It describes the workflow, publishing steps, automatic version tagging, and includes optimization tips.

## Branches & Workflow

We have three main branches:

- **main:** Stable, production-ready content.
- **test:** A shared environment for testing and reviewing changes.
- **Feature branches:** Individual branches based on `test` for user-specific changes.

### Branching Strategy

- Users create feature branches from the `test` branch for independent work.
- Changes are reviewed and merged first into `test`, then after approval, merged into `main`.

## Publishing via GitHub Actions

### Implementation Details

GitHub Actions automates the workflow:

- **Rendering:** Documents are rendered from `.qmd` files to HTML and DOCX format using Quarto.
- **Conversion:** LibreOffice macros automatically convert DOCX files into PDFs.
- **Deployment:** 
Rendered PDFs and HTML files are deployed to github-pages. The `main` and `test` branches each have their own GitHub Pages environmentsâ€”the official pages (from `main`) and a separate environment for testing (`test`).

## Automatic Tagging (Versioning)

### How It's Done

Automatic tagging occurs on each merge to the `main` branch. The GitHub Action (`mathieudutour/github-tag-action`) creates semantic tags automatically.

Configuration:

```yaml
- name: Auto Tagging
  uses: mathieudutour/github-tag-action@v6.2
  with:
    github_token: ${{ secrets.GITHUB_TOKEN }}
```

### Benefits

- Removes the need for manual tagging.
- Provides clear, consistent versioning.
- Makes reverting or referencing historical versions straightforward.

## Optimization Recommendations

### Resource Optimization

- Maintain one common test environment rather than multiple per-branch environments to minimize complexity and costs.

### Workflow Simplicity

- Simple branching strategy (just `main`, `test`, and feature branches) to avoid confusion and ease maintenance.
