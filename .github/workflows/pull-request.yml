name: Pull Request

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]
    branches:
      - test
      - main

jobs:
  generate_pr_title:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Generate PR Title
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              core.setFailed("No PR context found.");
              return;
            }

            const base = pr.base.ref;
            const head = pr.head.ref;

            // Define semantic-release type
            const typeMap = {
              test: 'feat',
              main: 'release'
            };
            const type = typeMap[base] || 'chore';

            // Sanitize and prepare title content
            const sanitize = (name) => name.toLowerCase().replace(/[^\w.-]/g, '-');
            const content = `sync ${sanitize(head)} into ${sanitize(base)}`;
            let title = `${type}(merge): ${content}`;

            // Truncate to 100 characters safely
            if (title.length > 100) {
              const maxContentLength = 100 - `${type}(merge): `.length;
              const truncatedContent = content.slice(0, maxContentLength - 1) + '‚Ä¶';
              title = `${type}(merge): ${truncatedContent}`;
            }

            console.log(`Setting PR title to: ${title}`);

            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              title: title
            });

  validate_merge_origin:
    needs: generate_pr_title
    runs-on: ubuntu-latest
    steps:
      - name: Validate PR base and head
        run: |
          echo "üîç Validating PR from '${{ github.head_ref }}' to '${{ github.base_ref }}'..."
          ALLOWED=false

          if [[ "${{ github.base_ref }}" == "test" && "${{ github.head_ref }}" == "develop" ]]; then
            ALLOWED=true
          elif [[ "${{ github.base_ref }}" == "main" && "${{ github.head_ref }}" == "test" ]]; then
            ALLOWED=true
          fi

          if [[ "$ALLOWED" != "true" ]]; then
            echo "‚ùå Invalid PR direction. Only allow:"
            echo "   develop ‚Üí test"
            echo "   test ‚Üí main"
            exit 1
          fi

          echo "‚úÖ PR direction is valid."
